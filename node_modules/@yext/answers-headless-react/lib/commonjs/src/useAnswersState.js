"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnswersState = void 0;
const react_1 = require("react");
const AnswersHeadlessContext_1 = require("./AnswersHeadlessContext");
const with_selector_1 = require("use-sync-external-store/shim/with-selector");
/**
 * Returns the Answers State returned by the map function.
 * Uses "use-sync-external-store/shim" to handle reading
 * and subscribing from external store in React version
 * pre-18 and 18.
 */
function useAnswersState(stateSelector) {
    const answers = (0, react_1.useContext)(AnswersHeadlessContext_1.AnswersHeadlessContext);
    if (answers.state === undefined) {
        throw new Error('Attempted to call useAnswersState() outside of AnswersHeadlessProvider.'
            + ' Please ensure that \'useAnswersState()\' is called within an AnswersHeadlessProvider component.');
    }
    const getSnapshot = (0, react_1.useCallback)(() => answers.state, [answers.state]);
    const isMountedRef = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        isMountedRef.current = true;
        return () => {
            isMountedRef.current = false;
        };
    }, []);
    const subscribe = (0, react_1.useCallback)(cb => answers.addListener({
        valueAccessor: state => state,
        callback: () => {
            // prevent React state update on an unmounted component
            if (!isMountedRef.current) {
                return;
            }
            cb();
        }
    }), [answers]);
    const selectedState = (0, with_selector_1.useSyncExternalStoreWithSelector)(subscribe, getSnapshot, getSnapshot, stateSelector);
    return selectedState;
}
exports.useAnswersState = useAnswersState;
//# sourceMappingURL=useAnswersState.js.map