var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { provideHeadless } from '@yext/search-headless';
import { SearchHeadlessContext } from './SearchHeadlessContext';
import acquireSessionId from './utils/acquireSessionId';
import packageJson from '../package.json';
const { version } = packageJson;
export function SearchHeadlessProvider(props) {
    const { children, verticalKey, sessionTrackingEnabled = true } = props, answersConfig = __rest(props, ["children", "verticalKey", "sessionTrackingEnabled"]);
    const additionalHttpHeaders = {
        'Client-SDK': {
            ANSWERS_HEADLESS_REACT: version
        }
    };
    const answers = provideHeadless(answersConfig, additionalHttpHeaders);
    verticalKey && answers.setVertical(verticalKey);
    answers.setSessionTrackingEnabled(sessionTrackingEnabled);
    if (sessionTrackingEnabled) {
        const sessionId = acquireSessionId();
        sessionId && answers.setSessionId(sessionId);
    }
    return (_jsx(SearchHeadlessContext.Provider, Object.assign({ value: answers }, { children: children }), void 0));
}
//# sourceMappingURL=SearchHeadlessProvider.js.map