import { jsx as _jsx } from "react/jsx-runtime";
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useReducer, useEffect, useContext } from 'react';
import { SearchHeadlessContext } from './SearchHeadlessContext';
import isShallowEqual from './utils/isShallowEqual';
/**
 * Generates a HOC that updates a given Component's props based on the current
 * search-headless state and a given mapping function.
 *
 * @deprecated
 * For class components, use `SearchHeadlessContext` directly to dispatch actions and receive state updates.
 * For functional components, use `useSearchActions` and `useSearchState` instead.
 */
export function subscribeToStateUpdates(mapStateToProps) {
    const generateSubscriberHOC = WrappedComponent => {
        /**
         * Keep manual track of the props mapped from state instead of storing
         * it in the SearchHeadlessSubscriber's state. This avoids react's batching
         * of state updates, which can result in mappedState not updating immediately.
         * This can, in turn, result in extra search-headless listener invocations.
         */
        let previousPropsFromState = {};
        return function AnswersHeadlessSubscriber(props) {
            const answers = useContext(SearchHeadlessContext);
            const [mergedProps, dispatch] = useReducer(() => {
                return Object.assign(Object.assign({}, props), previousPropsFromState);
            }, Object.assign(Object.assign({}, props), mapStateToProps(answers.state)));
            useEffect(() => {
                return answers.addListener({
                    valueAccessor: (state) => mapStateToProps(state),
                    callback: newPropsFromState => {
                        if (!isShallowEqual(previousPropsFromState, newPropsFromState)) {
                            previousPropsFromState = newPropsFromState;
                            dispatch();
                        }
                    }
                });
            });
            return _jsx(WrappedComponent, Object.assign({}, mergedProps), void 0);
        };
    };
    return generateSubscriberHOC;
}
//# sourceMappingURL=subscribeToStateUpdates.js.map