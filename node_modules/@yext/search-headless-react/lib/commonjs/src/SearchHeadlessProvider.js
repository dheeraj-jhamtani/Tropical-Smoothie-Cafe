"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchHeadlessProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_1 = require("@yext/search-headless");
const SearchHeadlessContext_1 = require("./SearchHeadlessContext");
const acquireSessionId_1 = __importDefault(require("./utils/acquireSessionId"));
const package_json_1 = __importDefault(require("../package.json"));
const { version } = package_json_1.default;
function SearchHeadlessProvider(props) {
    const { children, verticalKey, sessionTrackingEnabled = true } = props, answersConfig = __rest(props, ["children", "verticalKey", "sessionTrackingEnabled"]);
    const additionalHttpHeaders = {
        'Client-SDK': {
            ANSWERS_HEADLESS_REACT: version
        }
    };
    const answers = (0, search_headless_1.provideHeadless)(answersConfig, additionalHttpHeaders);
    verticalKey && answers.setVertical(verticalKey);
    answers.setSessionTrackingEnabled(sessionTrackingEnabled);
    if (sessionTrackingEnabled) {
        const sessionId = (0, acquireSessionId_1.default)();
        sessionId && answers.setSessionId(sessionId);
    }
    return ((0, jsx_runtime_1.jsx)(SearchHeadlessContext_1.SearchHeadlessContext.Provider, Object.assign({ value: answers }, { children: children }), void 0));
}
exports.SearchHeadlessProvider = SearchHeadlessProvider;
//# sourceMappingURL=SearchHeadlessProvider.js.map