import YextRtfConverter from '../src/converter';
import { nestedListsTestCase } from './fixtures';

const yextRtfConverter = new YextRtfConverter();

it('does not crash with length 0', () => {
  const richText = '`foo`';
  const html = yextRtfConverter.toTruncatedHTML(richText, 0);
  const expectedResult = '';
  expect(html).toEqual(expectedResult);
});

it('images alt text does not count towards trimmed length', () => {
  const richText = '![foo bar baz](/www.example.com)0123456789';
  const html = yextRtfConverter.toTruncatedHTML(richText, 5);
  const expectedResult = '<p><img src=\"/www.example.com\" alt=\"foo bar baz\">01234...</p>\n'
  expect(html).toEqual(expectedResult);
})

describe('supports various elements', () => {
  it('does not affect images ', () => {
    const richText = '![foo bar baz](/www.example.com)';
    const html = yextRtfConverter.toTruncatedHTML(richText, 1);
    const expectedResult = '<p><img src=\"/www.example.com\" alt=\"foo bar baz\"></p>\n'
    expect(html).toEqual(expectedResult);
  });

  it('works with code spans', () => {
    const richText = '`foo bar baz`';
    const html = yextRtfConverter.toTruncatedHTML(richText, 5);
    const expectedResult = '<p><code>foo b...</code></p>\n'
    expect(html).toEqual(expectedResult);
  });

  it('works with code blocks that contain new lines', () => {
    const richText =
      '```\n' +
      'foo\n' +
      'bar\n' +
      'baz\n' +
      '```\n';
    const html = yextRtfConverter.toTruncatedHTML(richText, 5);
    const expectedResult = '<pre><code>foo\nb...</code></pre>\n'
    expect(html).toEqual(expectedResult);
  });

  it('works with block quotes', () => {
    const richText = '> foo bar baz';
    const html = yextRtfConverter.toTruncatedHTML(richText, 7);
    const expectedResult =
      '<blockquote>\n<p>foo bar...</p>\n</blockquote>\n'
    expect(html).toEqual(expectedResult);
  });

  it('works with strikethrough', () => {
    const richText = '~~foo bar baz~~';
    const html = yextRtfConverter.toTruncatedHTML(richText, 7);
    const expectedResult = '<p><s>foo bar...</s></p>\n'
    expect(html).toEqual(expectedResult);
  });

  it('works with subscript', () => {
    const richText = '~foobarbaz~';
    const html = yextRtfConverter.toTruncatedHTML(richText, 7);
    const expectedResult = '<p><sub>foobarb...</sub></p>\n';
    expect(html).toEqual(expectedResult);
  });

  it('works with strikethrough', () => {
    const richText = '~~foo bar baz~~';
    const html = yextRtfConverter.toTruncatedHTML(richText, 7);
    const expectedResult = '<p><s>foo bar...</s></p>\n';
    expect(html).toEqual(expectedResult);
  });

  it('works with links', () => {
    const richText = '0[12345](https://answers.yext.com "Search")6789'
    const html = yextRtfConverter.toTruncatedHTML(richText, 7);
    const expectedResult = '<p>0<a href="https://answers.yext.com" title="Search">12345</a>6...</p>\n';
    expect(html).toEqual(expectedResult);
  });

  it('works with code fences', () => {
    const richText = '```\n{ "this is": "a code fence" }\n```';
    const html = yextRtfConverter.toTruncatedHTML(richText, 7);
    const expectedResult = '<pre><code>{ &quot;this...</code></pre>\n';
    expect(html).toEqual(expectedResult);
  });

  it('works with tables', () => {
    const richText = `
| Syntax      | Description |
| ----------- | ----------- |
| Header      | Title       |
| Paragraph   | Text        |
    `;
    const html = yextRtfConverter.toTruncatedHTML(richText, 5);
    const expectedResult =
      `<table>
<thead>
<tr>
<th>Synta...</th>
</tr>
</thead>
</table>\n`;
    expect(html).toEqual(expectedResult);
  });
});

describe('works with headings', () => {
  const testText = 'foo bar baz';
  const expectedConversions = {
    h1: {
      richText: '# ' + testText,
      expectedHTML: '<h1>foo...</h1>\n'
    },
    h2: {
      richText: '## ' + testText,
      expectedHTML: '<h2>foo...</h2>\n'
    },
    h3: {
      richText: '### ' + testText,
      expectedHTML: '<h3>foo...</h3>\n'
    },
    h4: {
      richText: '#### ' + testText,
      expectedHTML: '<h4>foo...</h4>\n'
    },
    h5: {
      richText: '##### ' + testText,
      expectedHTML: '<h5>foo...</h5>\n'
    },
    h6: {
      richText: '###### ' + testText,
      expectedHTML: '<h6>foo...</h6>\n'
    }
  };

  Object.entries(expectedConversions).forEach(([headingType, conversion]) => {
    it(`works with ${headingType} headings`, () => {
      const html = yextRtfConverter.toTruncatedHTML(conversion.richText, 3);
      expect(html).toEqual(conversion.expectedHTML);
    });
  });
});

describe('formatting markdown with underlines in it', () => {
  it('works for the trival case', () => {
    const richText = '++I should be underlined++';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><u>I s...</u></p>\n');
  });

  it('works when combined with italics', () => {
    const richText = '*++I should be underlined++*';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><em><u>I s...</u></em></p>\n');
  });

  it('works when combined with bold', () => {
    const richText = '**++I should be underlined++**';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><strong><u>I s...</u></strong></p>\n');
  });

  it('works when combined with strikethrough', () => {
    const richText = '~~++This was mistaken, underlined text++~~';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><s><u>Thi...</u></s></p>\n');
  });

  it('works when combined with bold AND italics', () => {
    const richText = '***++I should be underlined++***';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><em><strong><u>I s...</u></strong></em></p>\n');
  });

  it('works when combined with bold AND italics AND extra junk at the edges', () => {
    const richText = '**random stuff** __dont mind me__ ***++I should be \nunderlined++*** hope your tests pass! \n\n';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><strong>ran...</strong></p>\n');
  });

  it('works when there are multiple underlines', () => {
    const richText = '**++i am underlined++ ++i am also++** ++same++';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<p><strong><u>i a...</u></strong></p>\n');
  });

  it('works with code blocks', () => {
    const richText = '\tcode**code**++code++\n';
    const html = yextRtfConverter.toTruncatedHTML(richText, 3);
    expect(html).toEqual('<pre><code>cod...</code></pre>\n');
  });

  describe('works with multiple lists and links', () => {
    const richText =
      '**I AM BOLD** now I am not *I AM ITALICS* now I am not ++BRASAAAAAP++\n\n' +
      '* ++I am underline list++\n\n' +
      '1. ++I am number list++\n' +
      '2. ++[I am link to site](http://olivershi.io)++\n\n' +
      '++[url link](http://google.com)++\n\n' +
      '++[phone link](tel:+17326183404)++\n\n' +
      '++[email link](mailto:oshi@yext.com)++\n';

    it('when cut off at 30', () => {
      const html = yextRtfConverter.toTruncatedHTML(richText, 30);
      const expectedResult =
        '<p><strong>I AM BOLD</strong> now I am not <em>I AM IT...</em></p>\n';
      expect(html).toEqual(expectedResult);
    });

    it('when cut off at 100', () => {
      const html = yextRtfConverter.toTruncatedHTML(richText, 100);
      const expectedResult =
        `<p><strong>I AM BOLD</strong> now I am not <em>I AM ITALICS</em> now I am not <u>BRASAAAAAP</u></p>
<ul>
<li><u>I am underline list</u></li>
</ul>
<ol>
<li><u>I am number list</u></li>
<li><u><a href="http://olivershi.io">I am l...</a></u></li>
</ol>\n`;
      expect(html).toEqual(expectedResult);
    });
  });
});

describe('works with nested lists', () => {
  it('can cut off at 1', () => {
    const html = yextRtfConverter.toTruncatedHTML(nestedListsTestCase, 1);
    const expectedResult = '<ol>\n<li>o...</li>\n</ol>\n';
    expect(html).toEqual(expectedResult);
  });

  it('will not include extra elements', () => {
    const html = yextRtfConverter.toTruncatedHTML(nestedListsTestCase, 3);
    const expectedResult = '<ol>\n<li>one...</li>\n</ol>\n';
    expect(html).toEqual(expectedResult);
  });

  it('works with one layer of nested lists', () => {
    const html = yextRtfConverter.toTruncatedHTML(nestedListsTestCase, 4);
    const expectedResult =
      `<ol>
<li>one
<ul>
<li>t...</li>
</ul>
</li>
</ol>\n`;
    expect(html).toEqual(expectedResult);
  });

  it('can truncate within arbitrary layers of lists', () => {
    const html = yextRtfConverter.toTruncatedHTML(nestedListsTestCase, 18);
    const expectedResult =
      `<ol>
<li>one
<ul>
<li>two
<ol>
<li>three
<ul>
<li>four <code>co...</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>\n`;
    expect(html).toEqual(expectedResult);
  });
});

it('works with escaped characters', () => {
  const richText = '\\* Without the backslash, this would be a bullet in an unordered list.';
  const expectedResult = '<p>* Without the backslash...</p>\n';
  const html = yextRtfConverter.toTruncatedHTML(richText, 23);
  expect(html).toEqual(expectedResult);
});

describe('works with horizontal rules', () => {
  const richText = lineText => `
Without blank lines, this would be a heading.

${lineText}

Don't do this!\n`;

  const lineTexts = ['***', '---', '___'];

  for (const lineText of lineTexts) {
    it('when cut off right before the line', () => {
      const expectedResult = "<p>Without blank lines, this would be a heading....</p>\n";
      const html = yextRtfConverter.toTruncatedHTML(richText(lineText), 45);
      expect(html).toEqual(expectedResult);
    });

    it('when cut off after the line', () => {
      const expectedResult = "<p>Without blank lines, this would be a heading.</p>\n<hr>\n<p>Don't...</p>\n";
      const html = yextRtfConverter.toTruncatedHTML(richText(lineText), 50);
      expect(html).toEqual(expectedResult);
    });
  }
});

it('does not over truncate links', () => {
  const richText =
    '++[url link](http://google.com)++\n\n' +
    '++[phone link](tel:+17326183404)++\n\n' +
    '++[email link](mailto:oshi@yext.com)++\n';
  const html = yextRtfConverter.toTruncatedHTML(richText, 10);
  const expectedResult =
    '<p><u><a href="http://google.com">url link</a></u></p>\n' +
    '<p><u><a href="tel:+17326183404">ph...</a></u></p>\n';
  expect(html).toEqual(expectedResult);
});

it('can specify a custom suffix', () => {
  const richText = '## 01234';
  const html = yextRtfConverter.toTruncatedHTML(richText, 2, 'abc');
  const expectedResult = '<h2>01abc</h2>\n';
  expect(html).toEqual(expectedResult);
});

it('can parse bracketed text without throwing an error', () => {
  const richText = "[foo]";
  const html = yextRtfConverter.toTruncatedHTML(richText, 500);
  const expectedResult = '<p>[foo]</p>\n';
  expect(html).toEqual(expectedResult);
});
