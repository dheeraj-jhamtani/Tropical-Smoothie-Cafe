"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectAnswer = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const search_headless_react_1 = require("@yext/search-headless-react");
const renderHighlightedValue_1 = require("./utils/renderHighlightedValue");
const classnames_1 = __importDefault(require("classnames"));
const useComposedCssClasses_1 = require("../hooks/useComposedCssClasses");
const ThumbsFeedback_1 = require("./ThumbsFeedback");
const useCardAnalyticsCallback_1 = require("../hooks/useCardAnalyticsCallback");
const useCardFeedbackCallback_1 = require("../hooks/useCardFeedbackCallback");
const builtInCssClasses = {
    directAnswerContainer: '',
    directAnswerLoading: 'opacity-50',
    answer: 'font-bold text-xl text-neutral-dark',
    description: 'text-neutral',
    content: 'mt-4',
    highlighted: 'bg-primary-light',
    answerContainer: 'p-4 border rounded-lg shadow-sm',
    thumbsFeedbackContainer: ThumbsFeedback_1.builtInCssClasses.thumbsFeedbackContainer,
    thumbsUpIcon: ThumbsFeedback_1.builtInCssClasses.thumbsUpIcon,
    thumbsDownIcon: ThumbsFeedback_1.builtInCssClasses.thumbsDownIcon
};
/**
 * Renders Direct Answers provided by the Search API.
 *
 * @public
 *
 * @param props - {@link DirectAnswerProps}
 * @returns A react element for DirectAnswer
 */
function DirectAnswer(props) {
    var _a;
    const directAnswerResult = (0, search_headless_react_1.useSearchState)(state => state.directAnswer.result);
    const isLoading = (0, search_headless_react_1.useSearchState)(state => state.searchStatus.isLoading || false);
    const composedCssClasses = (0, useComposedCssClasses_1.useComposedCssClasses)(builtInCssClasses, props.customCssClasses);
    const handleClickViewDetails = (0, useCardAnalyticsCallback_1.useCardAnalyticsCallback)(directAnswerResult, 'CTA_CLICK');
    const handleClickFeedbackButton = (0, useCardFeedbackCallback_1.useCardFeedbackCallback)(directAnswerResult);
    if (!directAnswerResult) {
        return null;
    }
    const cssClasses = getCssClassesForAnswerType(composedCssClasses, directAnswerResult.type);
    const title = directAnswerResult.type === search_headless_react_1.DirectAnswerType.FeaturedSnippet
        ? directAnswerResult.value
        : `${directAnswerResult.entityName} / ${directAnswerResult.fieldName}`;
    const description = directAnswerResult.type === search_headless_react_1.DirectAnswerType.FeaturedSnippet
        ? (0, renderHighlightedValue_1.renderHighlightedValue)(directAnswerResult.snippet, { highlighted: cssClasses.highlighted })
        : directAnswerResult.value;
    const link = directAnswerResult.relatedResult.link;
    function getLinkText(directAnswerResult) {
        const isSnippet = directAnswerResult.type === search_headless_react_1.DirectAnswerType.FeaturedSnippet;
        const name = directAnswerResult.relatedResult.name;
        const snippetLinkMessage = 'Read more about ';
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [isSnippet && name && (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: 'pt-4 text-neutral' }, { children: [snippetLinkMessage, (0, jsx_runtime_1.jsx)("a", Object.assign({ className: 'text-primary', href: link, onClick: handleClickViewDetails }, { children: name }), void 0)] }), void 0), !isSnippet && link && (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'pt-4 text-neutral' }, { children: (0, jsx_runtime_1.jsx)("a", Object.assign({ href: link, className: 'text-primary', onClick: handleClickViewDetails }, { children: "View Details" }), void 0) }), void 0)] }, void 0));
    }
    const containerCssClasses = (0, classnames_1.default)(cssClasses.directAnswerContainer, {
        [(_a = cssClasses.directAnswerLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: containerCssClasses }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.answerContainer }, { children: [title &&
                        (0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.header }, { children: title }), void 0), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: cssClasses.content }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: cssClasses.body }, { children: description }), void 0), link && getLinkText(directAnswerResult)] }), void 0)] }), void 0), (0, jsx_runtime_1.jsx)(ThumbsFeedback_1.ThumbsFeedback, { onClick: handleClickFeedbackButton, customCssClasses: composedCssClasses }, void 0)] }), void 0));
}
exports.DirectAnswer = DirectAnswer;
function getCssClassesForAnswerType(cssClasses, type) {
    const isSnippet = type === search_headless_react_1.DirectAnswerType.FeaturedSnippet;
    return Object.assign(Object.assign({}, cssClasses), { header: isSnippet ? cssClasses.answer : cssClasses.description, body: isSnippet ? cssClasses.description : cssClasses.answer });
}
//# sourceMappingURL=DirectAnswer.js.map