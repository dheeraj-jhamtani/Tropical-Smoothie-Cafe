import { NearFilterValue, Filter, SelectableFilter, NumberRangeValue, SearchActions, DisplayableFacet } from '@yext/search-headless-react';
/**
 * Check if the object follows NearFilterValue interface.
 */
export declare function isNearFilterValue(obj: unknown): obj is NearFilterValue;
/**
 * Checks if the object follows the NumberRangeValue interface.
 */
export declare function isNumberRangeValue(obj: unknown): obj is NumberRangeValue;
/**
 * Checks if the facet is a numerical facet with number range filter options.
 */
export declare function isNumericalFacet(facet: DisplayableFacet): boolean;
/**
 * Returns true if the two given filters are the same.
 */
export declare function isDuplicateFilter(thisFilter: Filter, otherFilter: Filter): boolean;
/**
 * Finds the {@link SelectableFilter} from the list provided that matches the given {@link Filter}.
 * If no matching {@link SelectableFilter} can be found, undefined is returned.
 *
 * @param filter - The filter to match against.
 * @param selectableFilters - The list of {@link SelectableFilters} to search against.
 */
export declare function findSelectableFilter(filter: Filter, selectableFilters: SelectableFilter[]): SelectableFilter | undefined;
/**
 * Creates a number range value based on a min and max from user input.
 */
export declare function parseNumberRangeInput(minRangeInput: string, maxRangeInput: string): NumberRangeValue;
/**
 * Deselects the selected static number range filters in state. If fieldIds are
 * provided, only filters corresponding to one of those fieldIds are deselected.
 * Otherwise, all selected filters are deselected.
 */
export declare function clearStaticRangeFilters(searchActions: SearchActions, fieldIds?: Set<string>): void;
/**
 * Returns a set of fieldIds of the numerical facets in state that have at
 * least one option selected.
 */
export declare function getSelectedNumericalFacetFields(searchActions: SearchActions): Set<string>;
//# sourceMappingURL=filterutils.d.ts.map