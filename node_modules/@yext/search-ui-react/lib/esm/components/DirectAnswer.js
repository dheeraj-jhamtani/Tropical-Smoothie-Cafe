import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useSearchState, DirectAnswerType } from '@yext/search-headless-react';
import { renderHighlightedValue } from './utils/renderHighlightedValue';
import classNames from 'classnames';
import { useComposedCssClasses } from '../hooks/useComposedCssClasses';
import { ThumbsFeedback, builtInCssClasses as thumbsFeedbackCssClasses } from './ThumbsFeedback';
import { useCardAnalyticsCallback } from '../hooks/useCardAnalyticsCallback';
import { useCardFeedbackCallback } from '../hooks/useCardFeedbackCallback';
const builtInCssClasses = {
    directAnswerContainer: '',
    directAnswerLoading: 'opacity-50',
    answer: 'font-bold text-xl text-neutral-dark',
    description: 'text-neutral',
    content: 'mt-4',
    highlighted: 'bg-primary-light',
    answerContainer: 'p-4 border rounded-lg shadow-sm',
    thumbsFeedbackContainer: thumbsFeedbackCssClasses.thumbsFeedbackContainer,
    thumbsUpIcon: thumbsFeedbackCssClasses.thumbsUpIcon,
    thumbsDownIcon: thumbsFeedbackCssClasses.thumbsDownIcon
};
/**
 * Renders Direct Answers provided by the Search API.
 *
 * @public
 *
 * @param props - {@link DirectAnswerProps}
 * @returns A react element for DirectAnswer
 */
export function DirectAnswer(props) {
    var _a;
    const directAnswerResult = useSearchState(state => state.directAnswer.result);
    const isLoading = useSearchState(state => state.searchStatus.isLoading || false);
    const composedCssClasses = useComposedCssClasses(builtInCssClasses, props.customCssClasses);
    const handleClickViewDetails = useCardAnalyticsCallback(directAnswerResult, 'CTA_CLICK');
    const handleClickFeedbackButton = useCardFeedbackCallback(directAnswerResult);
    if (!directAnswerResult) {
        return null;
    }
    const cssClasses = getCssClassesForAnswerType(composedCssClasses, directAnswerResult.type);
    const title = directAnswerResult.type === DirectAnswerType.FeaturedSnippet
        ? directAnswerResult.value
        : `${directAnswerResult.entityName} / ${directAnswerResult.fieldName}`;
    const description = directAnswerResult.type === DirectAnswerType.FeaturedSnippet
        ? renderHighlightedValue(directAnswerResult.snippet, { highlighted: cssClasses.highlighted })
        : directAnswerResult.value;
    const link = directAnswerResult.relatedResult.link;
    function getLinkText(directAnswerResult) {
        const isSnippet = directAnswerResult.type === DirectAnswerType.FeaturedSnippet;
        const name = directAnswerResult.relatedResult.name;
        const snippetLinkMessage = 'Read more about ';
        return (_jsxs(_Fragment, { children: [isSnippet && name && _jsxs("div", Object.assign({ className: 'pt-4 text-neutral' }, { children: [snippetLinkMessage, _jsx("a", Object.assign({ className: 'text-primary', href: link, onClick: handleClickViewDetails }, { children: name }), void 0)] }), void 0), !isSnippet && link && _jsx("div", Object.assign({ className: 'pt-4 text-neutral' }, { children: _jsx("a", Object.assign({ href: link, className: 'text-primary', onClick: handleClickViewDetails }, { children: "View Details" }), void 0) }), void 0)] }, void 0));
    }
    const containerCssClasses = classNames(cssClasses.directAnswerContainer, {
        [(_a = cssClasses.directAnswerLoading) !== null && _a !== void 0 ? _a : '']: isLoading
    });
    return (_jsxs("div", Object.assign({ className: containerCssClasses }, { children: [_jsxs("div", Object.assign({ className: cssClasses.answerContainer }, { children: [title &&
                        _jsx("div", Object.assign({ className: cssClasses.header }, { children: title }), void 0), _jsxs("div", Object.assign({ className: cssClasses.content }, { children: [_jsx("div", Object.assign({ className: cssClasses.body }, { children: description }), void 0), link && getLinkText(directAnswerResult)] }), void 0)] }), void 0), _jsx(ThumbsFeedback, { onClick: handleClickFeedbackButton, customCssClasses: composedCssClasses }, void 0)] }), void 0));
}
function getCssClassesForAnswerType(cssClasses, type) {
    const isSnippet = type === DirectAnswerType.FeaturedSnippet;
    return Object.assign(Object.assign({}, cssClasses), { header: isSnippet ? cssClasses.answer : cssClasses.description, body: isSnippet ? cssClasses.description : cssClasses.answer });
}
//# sourceMappingURL=DirectAnswer.js.map