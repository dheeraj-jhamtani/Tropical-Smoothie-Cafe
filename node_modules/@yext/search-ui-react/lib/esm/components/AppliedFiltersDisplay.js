import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CloseIcon } from '../icons/CloseIcon';
import { useClearFiltersCallback } from '../hooks/useClearFiltersCallback';
import { useSearchActions } from '@yext/search-headless-react';
import { isDuplicateFilter } from '../utils/filterutils';
import { executeSearch } from '../utils/search-operations';
/**
 * A component that renders applied filters based on the provided GroupedFilters.
 *
 * @param props - {@link AppliedFiltersDisplayProps}
 * @returns A React element for the applied filters
 */
export function AppliedFiltersDisplay(props) {
    const { nlpFilterDisplayNames = [], removableFilters = [], cssClasses = {} } = props;
    const handleClickClearAllButton = useClearFiltersCallback();
    const searchActions = useSearchActions();
    if (removableFilters.length + nlpFilterDisplayNames.length === 0) {
        return null;
    }
    const dedupedNlpFilterDisplaynames = nlpFilterDisplayNames.filter(displayName => {
        return !removableFilters.some(f => f.displayName === displayName);
    });
    const dedupedRemovableFilters = getDedupedRemovableFilters(removableFilters);
    function handleRemoveDedupedFilter(dedupedFilter) {
        var _a;
        dedupedFilter.handleRemove();
        for (const f of (_a = dedupedFilter.duplicates) !== null && _a !== void 0 ? _a : []) {
            f.handleRemove();
        }
        searchActions.setOffset(0);
        executeSearch(searchActions);
    }
    return (_jsxs("div", Object.assign({ className: cssClasses.appliedFiltersContainer, "aria-label": 'Applied filters to current search' }, { children: [dedupedNlpFilterDisplaynames.map(displayName => renderNlpFilter(displayName, cssClasses)), dedupedRemovableFilters.map(f => {
                return renderRemovableFilter(f.displayName, () => handleRemoveDedupedFilter(f), cssClasses);
            }), removableFilters.length > 0 &&
                _jsx("button", Object.assign({ onClick: handleClickClearAllButton, className: cssClasses.clearAllButton }, { children: "Clear All" }), void 0)] }), void 0));
}
function getDedupedRemovableFilters(filters) {
    const dedupedFilters = [];
    for (const f of filters) {
        const preexistingDupe = dedupedFilters.find(d => isDuplicateFilter(d.filter, f.filter));
        if (!preexistingDupe) {
            dedupedFilters.push(f);
        }
        else {
            if (!preexistingDupe.duplicates) {
                preexistingDupe.duplicates = [f];
            }
            else {
                preexistingDupe.duplicates.push(f);
            }
        }
    }
    return dedupedFilters;
}
function renderRemovableFilter(displayName, handleRemove, cssClasses) {
    return (_jsxs("div", Object.assign({ className: cssClasses.removableFilter }, { children: [_jsx("div", Object.assign({ className: cssClasses.filterLabel }, { children: displayName }), void 0), _jsx("button", Object.assign({ className: 'w-2 h-2 text-neutral m-1.5', onClick: handleRemove, "aria-label": `Remove "${displayName}" filter` }, { children: _jsx(CloseIcon, {}, void 0) }), void 0)] }), displayName));
}
function renderNlpFilter(displayName, cssClasses) {
    return (_jsx("div", Object.assign({ className: cssClasses.nlpFilter }, { children: _jsx("span", Object.assign({ className: cssClasses.filterLabel }, { children: displayName }), void 0) }), displayName));
}
//# sourceMappingURL=AppliedFiltersDisplay.js.map