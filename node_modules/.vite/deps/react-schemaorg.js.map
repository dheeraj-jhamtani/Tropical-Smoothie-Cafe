{
  "version": 3,
  "sources": ["../../react-schemaorg/dist/src/json-ld.js", "../../react-schemaorg/dist/src/index.js"],
  "sourcesContent": ["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.helmetJsonLdProp = exports.jsonLdScriptProps = exports.JsonLd = void 0;\nconst React = require(\"react\");\nfunction JsonLd(props) {\n    return React.createElement(\"script\", Object.assign({}, jsonLdScriptProps(props.item, props)));\n}\nexports.JsonLd = JsonLd;\nfunction jsonLdScriptProps(item, options = {}) {\n    return {\n        type: \"application/ld+json\",\n        dangerouslySetInnerHTML: {\n            __html: JSON.stringify(item, safeJsonLdReplacer, options.space),\n        },\n    };\n}\nexports.jsonLdScriptProps = jsonLdScriptProps;\nfunction helmetJsonLdProp(item, options = {}) {\n    return {\n        type: \"application/ld+json\",\n        innerHTML: JSON.stringify(item, safeJsonLdReplacer, options.space),\n    };\n}\nexports.helmetJsonLdProp = helmetJsonLdProp;\nconst ESCAPE_ENTITIES = Object.freeze({\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\",\n});\nconst ESCAPE_REGEX = new RegExp(`[${Object.keys(ESCAPE_ENTITIES).join(\"\")}]`, \"g\");\nconst ESCAPE_REPLACER = (t) => ESCAPE_ENTITIES[t];\n/**\n * A replacer for JSON.stringify to strip JSON-LD of illegal HTML entities\n * per https://www.w3.org/TR/json-ld11/#restrictions-for-contents-of-json-ld-script-elements\n */\nconst safeJsonLdReplacer = (() => {\n    // Replace per https://www.w3.org/TR/json-ld11/#restrictions-for-contents-of-json-ld-script-elements\n    // Solution from https://stackoverflow.com/a/5499821/864313\n    return (_, value) => {\n        switch (typeof value) {\n            case \"object\":\n                // Omit null values.\n                if (value === null) {\n                    return undefined;\n                }\n                return value; // JSON.stringify will recursively call replacer.\n            case \"number\":\n            case \"boolean\":\n            case \"bigint\":\n                return value; // These values are not risky.\n            case \"string\":\n                return value.replace(ESCAPE_REGEX, ESCAPE_REPLACER);\n            default: {\n                // We shouldn't expect other types.\n                isNever(value);\n                // JSON.stringify will remove this element.\n                return undefined;\n            }\n        }\n    };\n})();\n// Utility: Assert never\nfunction isNever(_) { }\n", "\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.jsonLdScriptProps = exports.JsonLd = exports.helmetJsonLdProp = void 0;\nvar json_ld_1 = require(\"./json-ld\");\nObject.defineProperty(exports, \"helmetJsonLdProp\", { enumerable: true, get: function () { return json_ld_1.helmetJsonLdProp; } });\nObject.defineProperty(exports, \"JsonLd\", { enumerable: true, get: function () { return json_ld_1.JsonLd; } });\nObject.defineProperty(exports, \"jsonLdScriptProps\", { enumerable: true, get: function () { return json_ld_1.jsonLdScriptProps; } });\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAA;AAgBA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,mBAAmB,QAAQ,oBAAoB,QAAQ,SAAS;AACxE,QAAM,QAAQ;AACd,aAAS,OAAO,OAAO;AACnB,aAAO,MAAM,cAAc,UAAU,OAAO,OAAO,CAAC,GAAG,kBAAkB,MAAM,MAAM,KAAK,CAAC,CAAC;AAAA,IAChG;AACA,YAAQ,SAAS;AACjB,aAAS,kBAAkB,MAAM,UAAU,CAAC,GAAG;AAC3C,aAAO;AAAA,QACH,MAAM;AAAA,QACN,yBAAyB;AAAA,UACrB,QAAQ,KAAK,UAAU,MAAM,oBAAoB,QAAQ,KAAK;AAAA,QAClE;AAAA,MACJ;AAAA,IACJ;AACA,YAAQ,oBAAoB;AAC5B,aAAS,iBAAiB,MAAM,UAAU,CAAC,GAAG;AAC1C,aAAO;AAAA,QACH,MAAM;AAAA,QACN,WAAW,KAAK,UAAU,MAAM,oBAAoB,QAAQ,KAAK;AAAA,MACrE;AAAA,IACJ;AACA,YAAQ,mBAAmB;AAC3B,QAAM,kBAAkB,OAAO,OAAO;AAAA,MAClC,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACT,CAAC;AACD,QAAM,eAAe,IAAI,OAAO,IAAI,OAAO,KAAK,eAAe,EAAE,KAAK,EAAE,MAAM,GAAG;AACjF,QAAM,kBAAkB,CAAC,MAAM,gBAAgB;AAK/C,QAAM,sBAAsB,MAAM;AAG9B,aAAO,CAAC,GAAG,UAAU;AACjB,gBAAQ,OAAO,OAAO;AAAA,UAClB,KAAK;AAED,gBAAI,UAAU,MAAM;AAChB,qBAAO;AAAA,YACX;AACA,mBAAO;AAAA,UACX,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACD,mBAAO;AAAA,UACX,KAAK;AACD,mBAAO,MAAM,QAAQ,cAAc,eAAe;AAAA,UACtD,SAAS;AAEL,oBAAQ,KAAK;AAEb,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,GAAG;AAEH,aAAS,QAAQ,GAAG;AAAA,IAAE;AAAA;AAAA;;;AC/EtB;AAAA;AAgBA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,oBAAoB,QAAQ,SAAS,QAAQ,mBAAmB;AACxE,QAAI,YAAY;AAChB,WAAO,eAAe,SAAS,oBAAoB,EAAE,YAAY,MAAM,KAAK,WAAY;AAAE,aAAO,UAAU;AAAA,IAAkB,EAAE,CAAC;AAChI,WAAO,eAAe,SAAS,UAAU,EAAE,YAAY,MAAM,KAAK,WAAY;AAAE,aAAO,UAAU;AAAA,IAAQ,EAAE,CAAC;AAC5G,WAAO,eAAe,SAAS,qBAAqB,EAAE,YAAY,MAAM,KAAK,WAAY;AAAE,aAAO,UAAU;AAAA,IAAmB,EAAE,CAAC;AAAA;AAAA;",
  "names": []
}
