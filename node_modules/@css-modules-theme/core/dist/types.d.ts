export declare type Semipartial<A, K extends keyof A> = Partial<A> & Pick<A, K>;
export declare enum Compose {
    Merge = "merge",
    Assign = "assign",
    Replace = "replace"
}
export declare type Prefix = string;
export interface Theme {
    [key: string]: string;
}
export interface ThemeOptions {
    theme: Theme;
    prefix?: Prefix;
    compose?: Compose;
    noCache?: boolean;
    noParseComposes?: boolean;
}
export interface ComposedThemesCacheItem {
    prefix?: Prefix;
    againstTheme: Theme;
    composedTheme: Theme;
    composeMethod: Compose;
    parseComposes: boolean;
}
export declare type ComposedThemesCacheItems = ComposedThemesCacheItem[];
export declare type ComposedThemesCacheMap = WeakMap<Theme, ComposedThemesCacheItems>;
export interface PrefixedThemesCacheItem {
    theme: Theme;
    prefix: Prefix;
    finalTheme: Theme;
}
export declare type PrefixedThemesCacheItems = PrefixedThemesCacheItem[];
export declare type PrefixedThemesCacheMap = WeakMap<Theme, PrefixedThemesCacheItems>;
export interface ThemeDependencies {
    [key: string]: [string];
}
export declare type ThemeDependenciesCacheMap = WeakMap<Theme, ThemeDependencies>;
//# sourceMappingURL=types.d.ts.map