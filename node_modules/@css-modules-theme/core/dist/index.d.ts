import filterThemeWithPrefix from './utils/filterThemeWithPrefix';
import getThemeCompositionDependencies from './utils/getThemeCompositionDependencies';
import { Theme, ThemeOptions, Prefix, Compose, ComposedThemesCacheItem, ComposedThemesCacheMap, PrefixedThemesCacheItem, PrefixedThemesCacheMap, ThemeDependencies, ThemeDependenciesCacheMap } from './types';
/**
 * Filter theme object with a given prefix and cache the result which will be used on subsequent calls with the same params
 * See {@link filterThemeWithPrefix} for parameters list
 */
declare const getCachedPrefixedTheme: (theme: Theme, prefix: string) => Theme;
/**
 * Search theme object for a class composition and cache the result which will be used on subsequent calls with the same params
 * See {@link getThemeCompositionDependencies} for parameters list
 */
declare const getCachedThemeCompositionDependencies: (theme: Theme) => void | ThemeDependencies;
/**
 * Takes an array of objects, which contain themes and options, and returns a composed theme
 *
 * @param {Object[]} options
 * @param {Object} [options[].theme] - Theme object to compose
 * @param {string} [options[].compose] - Method of composition of current theme with previous one
 * @param {string} [options[].prefix] - Prefix to filter out properties in current theme before composition
 * @param {boolean} [options[].noCache=false] - Whether composed theme should not be cached for specified params.
 *
 * @returns {Object}
 */
declare const composeTheme: (options: ThemeOptions[]) => Theme;
export { Theme, ThemeOptions, Prefix, Compose, ComposedThemesCacheItem, ComposedThemesCacheMap, PrefixedThemesCacheItem, PrefixedThemesCacheMap, ThemeDependencies, ThemeDependenciesCacheMap, };
export { composeTheme, filterThemeWithPrefix, getThemeCompositionDependencies, getCachedPrefixedTheme, getCachedThemeCompositionDependencies, };
//# sourceMappingURL=index.d.ts.map